-- Domínio para controle de ativo/inativo
CREATE DOMAIN DM_ATIVO AS CHAR(1)
CHECK (VALUE IN ('S', 'N'));

-- Domínio para datas de criação/cadastro
CREATE DOMAIN DM_DATA_CRIACAO AS DATE;

-- Tabela de Produtos
CREATE TABLE TBL_PRODUTOS (
    ID_PRODUTO INTEGER NOT NULL,
    CODIGO VARCHAR(20),
    DESCRICAO VARCHAR(100),
    PRECO_CUSTO DECIMAL(10,2),
    PRECO_VENDA DECIMAL(10,2),
    CATEGORIA VARCHAR(50),
    QUANTIDADE_ESTOQUE INTEGER,
    FORNECEDOR VARCHAR(100),
    ATIVO DM_ATIVO,
    DATA_CADASTRO DM_DATA_CRIACAO,
    PRIMARY KEY (ID_PRODUTO)
);

-- Tabela de Clientes
CREATE TABLE TBL_CLIENTES (
    ID_CLIENTE INTEGER NOT NULL,
    NOME VARCHAR(100),
    CPF_CNPJ VARCHAR(20),
    ENDERECO VARCHAR(150),
    TELEFONE VARCHAR(20),
    EMAIL VARCHAR(100),
    DATA_NASCIMENTO DATE,
    HISTORICO_COMPRAS VARCHAR(255),
    PREFERENCIAS VARCHAR(255),
    ATIVO DM_ATIVO,
    PRIMARY KEY (ID_CLIENTE)
);

-- Tabela de Vendedores
CREATE TABLE TBL_VENDEDORES (
    ID_VENDEDOR INTEGER NOT NULL,
    NOME VARCHAR(100),
    CPF VARCHAR(14),
    TELEFONE VARCHAR(20),
    EMAIL VARCHAR(100),
    ATIVO DM_ATIVO,
    DATA_ADMISSAO DM_DATA_CRIACAO,
    PRIMARY KEY (ID_VENDEDOR)
);

-- Tabela de Vendas
CREATE TABLE TBL_VENDAS (
    ID_VENDA INTEGER NOT NULL,
    DATA_VENDA DM_DATA_CRIACAO,
    HORA TIME,
    ID_CLIENTE INTEGER,
    ID_VENDEDOR INTEGER,
    VALOR_TOTAL DECIMAL(10,2),
    DESCONTO DECIMAL(10,2),
    FORMA_PAGAMENTO VARCHAR(50),
    PRIMARY KEY (ID_VENDA)
);


-- Tabela de Usuários
CREATE TABLE TBL_USUARIOS (
    ID_USUARIO INTEGER NOT NULL,
    NOME VARCHAR(100),
    LOGIN VARCHAR(50),
    SENHA VARCHAR(50),
    PERFIL VARCHAR(30),
    ATIVO DM_ATIVO,
    DATA_CRIACAO DM_DATA_CRIACAO,
    PRIMARY KEY (ID_USUARIO)
);

--Criação das tabelas com PKComposta

CREATE TABLE TBL_ITENS_VENDA (
    ID_VENDA INTEGER NOT NULL,
    ID_PRODUTO INTEGER NOT NULL,
    QUANTIDADE INTEGER,
    PRECO_UNITARIO DECIMAL(10,2),
    DESCONTO DECIMAL(10,2),
    SUBTOTAL DECIMAL(10,2),
    PRIMARY KEY (ID_VENDA, ID_PRODUTO)
);

CREATE TABLE TBL_COMISSOES (
    ID_VENDEDOR INTEGER NOT NULL,
    ID_VENDA INTEGER NOT NULL,
    VALOR_COMISSAO DECIMAL(10,2),
    DATA_COMISSAO DM_DATA_CRIACAO,
    PRIMARY KEY (ID_VENDEDOR, ID_VENDA)
);

-- FKs da tabela TBL_VENDAS
ALTER TABLE TBL_VENDAS
DROP CONSTRAINT FK_VENDAS_USUARIO;

ALTER TABLE TBL_VENDAS
ADD CONSTRAINT FK_VENDAS_VENDEDOR
FOREIGN KEY (ID_VENDEDOR) REFERENCES TBL_VENDEDORES(ID_VENDEDOR);

-- FKs da tabela TBL_ITENS_VENDA
ALTER TABLE TBL_ITENS_VENDA
ADD CONSTRAINT FK_ITENS_VENDA_VENDA
FOREIGN KEY (ID_VENDA) REFERENCES TBL_VENDAS(ID_VENDA);

ALTER TABLE TBL_ITENS_VENDA
ADD CONSTRAINT FK_ITENS_VENDA_PRODUTO
FOREIGN KEY (ID_PRODUTO) REFERENCES TBL_PRODUTOS(ID_PRODUTO);

-- FKs da tabela TBL_COMISSOES
ALTER TABLE TBL_COMISSOES
ADD CONSTRAINT FK_COMISSOES_VENDA
FOREIGN KEY (ID_VENDA) REFERENCES TBL_VENDAS(ID_VENDA);

ALTER TABLE TBL_COMISSOES
ADD CONSTRAINT FK_COMISSOES_USUARIO
FOREIGN KEY (ID_VENDEDOR) REFERENCES TBL_USUARIOS(ID_USUARIO);

-- TBL_PRODUTOS
CREATE SEQUENCE GEN_TBL_PRODUTOS_ID;

SET TERM ^^ ;
CREATE TRIGGER BI_TBL_PRODUTOS_ID FOR TBL_PRODUTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_PRODUTO IS NULL) THEN
    NEW.ID_PRODUTO = NEXT VALUE FOR GEN_TBL_PRODUTOS_ID;
END ^^
SET TERM ; ^^

-- TBL_CLIENTES
CREATE SEQUENCE GEN_TBL_CLIENTES_ID;

SET TERM ^^ ;
CREATE TRIGGER BI_TBL_CLIENTES_ID FOR TBL_CLIENTES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_CLIENTE IS NULL) THEN
    NEW.ID_CLIENTE = NEXT VALUE FOR GEN_TBL_CLIENTES_ID;
END ^^
SET TERM ; ^^

-- TBL_USUARIOS
CREATE SEQUENCE GEN_TBL_USUARIOS_ID;

SET TERM ^^ ;
CREATE TRIGGER BI_TBL_USUARIOS_ID FOR TBL_USUARIOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_USUARIO IS NULL) THEN
    NEW.ID_USUARIO = NEXT VALUE FOR GEN_TBL_USUARIOS_ID;
END ^^
SET TERM ; ^^

-- TBL_VENDAS
CREATE SEQUENCE GEN_TBL_VENDAS_ID;

SET TERM ^^ ;
CREATE TRIGGER BI_TBL_VENDAS_ID FOR TBL_VENDAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_VENDA IS NULL) THEN
    NEW.ID_VENDA = NEXT VALUE FOR GEN_TBL_VENDAS_ID;
END ^^
SET TERM ; ^^

SET TERM ^^ ;
CREATE PROCEDURE SP_ATUALIZAR_ESTOQUE (
    PID_PRODUTO INTEGER,
    PQTD_VENDIDA INTEGER
)
AS
BEGIN
  UPDATE TBL_PRODUTOS
  SET QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE - :PQTD_VENDIDA
  WHERE ID_PRODUTO = :PID_PRODUTO;
END ^^
SET TERM ; ^^

--INSERÇÃO DE CLIENTE

SET TERM ^^ ;
CREATE PROCEDURE SP_INSERIR_CLIENTE (
    PNOME VARCHAR(100),
    PCPF_CNPJ VARCHAR(20),
    PENDERECO VARCHAR(150),
    PTELEFONE VARCHAR(20),
    PEMAIL VARCHAR(100),
    PDATA_NASCIMENTO DATE
)
AS
BEGIN
  INSERT INTO TBL_CLIENTES (
    NOME, CPF_CNPJ, ENDERECO, TELEFONE, EMAIL, DATA_NASCIMENTO, ATIVO
  ) VALUES (
    :PNOME, :PCPF_CNPJ, :PENDERECO, :PTELEFONE, :PEMAIL, :PDATA_NASCIMENTO, 'S'
  );
END ^^
SET TERM ; ^^

--CALCULO TOTAL DE VENDAS
SET TERM ^^ ;
CREATE PROCEDURE SP_CALCULAR_TOTAL_VENDA (
    PID_VENDA INTEGER
)
RETURNS (
    TOTAL DECIMAL(10,2)
)
AS
BEGIN
  SELECT SUM(SUBTOTAL)
  FROM TBL_ITENS_VENDA
  WHERE ID_VENDA = :PID_VENDA
  INTO :TOTAL;
  SUSPEND;
END ^^
SET TERM ; ^^

--Atualização de estoque das vendas.
SET TERM ^^ ;
CREATE TRIGGER TRG_ATUALIZAR_ESTOQUE AFTER INSERT ON TBL_ITENS_VENDA
AS
BEGIN
  UPDATE TBL_PRODUTOS
  SET QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE - NEW.QUANTIDADE
  WHERE ID_PRODUTO = NEW.ID_PRODUTO;
END ^^
SET TERM ; ^^

--Impedir as vendas com total negativo 
-- Criar exceção personalizada
CREATE EXCEPTION VALOR_TOTAL_INVALIDO 'O valor total da venda não pode ser negativo.';
SET TERM ^^ ;
CREATE TRIGGER TRG_VALIDA_VENDA BEFORE INSERT OR UPDATE ON TBL_VENDAS
AS
BEGIN
  IF (NEW.VALOR_TOTAL < 0) THEN
    EXCEPTION VALOR_TOTAL_INVALIDO;
END ^^
SET TERM ; ^^

--Preencher DATA_CRIACAO automaticamente em TBL_USUARIOS
SET TERM ^^ ;
CREATE TRIGGER TRG_USUARIO_DATA_CRIACAO BEFORE INSERT ON TBL_USUARIOS
AS
BEGIN
  IF (NEW.DATA_CRIACAO IS NULL) THEN
    NEW.DATA_CRIACAO = CURRENT_DATE;
END ^^
SET TERM ; ^^